generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String
  email        String        @unique
  firstname    String
  lastname     String
  user_role    Int           @default(3)
  avatar       String?
  is_active    Boolean       @default(true)
  createdAt    DateTime      @default(now())
  modifiedAt   DateTime?     @updatedAt
  transactions Transaction[]
}

model Transaction {
  id               Int       @id @default(autoincrement())
  userId           Int
  brandId          Int
  productId        Int
  quantity         Int
  price            Decimal   @db.Decimal(10, 2)
  price_total      Decimal   @db.Decimal(10, 2)
  transaction_type Int
  createdAt        DateTime  @default(now())
  modifiedAt       DateTime? @updatedAt
  brand            Brand     @relation(fields: [brandId], references: [id])
  product          Product   @relation(fields: [productId], references: [id])
  user             User      @relation(fields: [userId], references: [id])
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  price        Decimal       @db.Decimal(10, 2)
  stock        Int           @default(0)
  brandId      Int
  categoryId   Int
  min          Int           @default(0)
  max          Int?
  isDeleted    Boolean       @default(false)
  brand        Brand         @relation(fields: [brandId], references: [id])
  category     Category      @relation(fields: [categoryId], references: [id])
  transactions Transaction[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  isDeleted Boolean   @default(false)
  products  Product[]
}

model Brand {
  id           Int           @id @default(autoincrement())
  name         String
  image        String?
  isDeleted    Boolean       @default(false)
  products     Product[]
  transactions Transaction[]
}

model captracker_config {
  id    BigInt @id @default(autoincrement())
  key   String @unique @db.VarChar(255)
  value String
}

model captracker_logs {
  id         BigInt    @id @default(autoincrement())
  hostname   String?   @db.VarChar(255)
  pid        Int?
  source     String?   @db.VarChar(255)
  timestamp  DateTime? @default(now()) @db.Timestamptz(6)
  level      String?   @default("info") @db.VarChar(255)
  message    String?
  meta       String?
  errsole_id BigInt?

  @@index([hostname, pid, id])
  @@index([source, level, id])
  @@index([source, level, timestamp])
  @@index([errsole_id], map: "idx_errsole_id")
}

model captracker_notifications {
  id             BigInt    @id @default(autoincrement())
  errsole_id     BigInt?
  hostname       String?   @db.VarChar(255)
  hashed_message String?   @db.VarChar(255)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at], map: "idx_captracker_notifications_created_at")
  @@index([hostname, hashed_message, created_at], map: "idx_captracker_notifications_host_hashed_created")
}

model captracker_users {
  id              BigInt  @id @default(autoincrement())
  name            String? @db.VarChar(255)
  email           String  @unique @db.VarChar(255)
  hashed_password String  @db.VarChar(255)
  role            String  @db.VarChar(255)
}
